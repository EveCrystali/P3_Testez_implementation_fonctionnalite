diff --git a/P3AddNewFunctionalityDotNetCore.Tests/AccountControllerTests.cs b/P3AddNewFunctionalityDotNetCore.Tests/AccountControllerTests.cs
index 4925738..f2ef9c5 100644
--- a/P3AddNewFunctionalityDotNetCore.Tests/AccountControllerTests.cs
+++ b/P3AddNewFunctionalityDotNetCore.Tests/AccountControllerTests.cs
@@ -29,27 +29,35 @@ namespace P3AddNewFunctionalityDotNetCore.Tests
 {
     public class AccountControllerTests
     {
-        private AccountController _controller;
+        private AccountController _accountController;
 
-        [Fact]
-        public  async Task Login_WithValidModel_ReturnsRedirect()
+        private static LoginModel StartLoginModel(string username, string password, string returnUrl)
         {
-            // Arrange
-
-
-            var testUser = new IdentityUser
+            var loginModel = new LoginModel
             {
-                UserName = "Admin",
+                Name = username,
+                Password = password,
+                ReturnUrl = returnUrl
             };
+            return loginModel;
+        }
 
-            var loginModel = new LoginModel
+        private static IdentityUser StartIdentityUser(LoginModel loginModel)
+        {
+            var identityUser = new IdentityUser
             {
-                Name = "Admin",
-                Password = "P@ssword123",
-                ReturnUrl = "/Admin/Index"
+                UserName = loginModel.Name
             };
-            
+            return identityUser;
+        }
 
+        public static bool LoginValidator(LoginModel loginModel)
+        {
+                return IdentitySeedData.AdminPassword == loginModel.Password && IdentitySeedData.AdminUser == loginModel.Name;
+        }
+
+            private void SetupMocking(LoginModel loginModel, IdentityUser identityUser)
+        {
             var mockUserStore = new Mock<IUserStore<IdentityUser>>();
             var mockUserManager = new Mock<UserManager<IdentityUser>>(
                 mockUserStore.Object, null, null, null, null, null, null, null, null);
@@ -71,25 +79,39 @@ namespace P3AddNewFunctionalityDotNetCore.Tests
                 mockUserConfirmation.Object);
 
             var mockLocalizer = new Mock<IStringLocalizer<AccountController>>();
-            
+
             mockLocalizer.Setup(localizer => localizer["Invalid name or password"]).Returns(new LocalizedString("Invalid name or password", "Invalid credentials."));
 
+            bool isValid = LoginValidator(loginModel);
 
-            mockUserManager.Setup(um => um.FindByNameAsync(loginModel.Name)).ReturnsAsync(testUser);
-            mockUserManager.Setup(um => um.CheckPasswordAsync(testUser, loginModel.Password)).ReturnsAsync(true);
+            if (isValid)
+            {
+                mockUserManager.Setup(um => um.FindByNameAsync(loginModel.Name)).ReturnsAsync(identityUser);
+                mockUserManager.Setup(um => um.CheckPasswordAsync(identityUser, loginModel.Password)).ReturnsAsync(true);
 
-            //mocksignInManager.Setup(x => x.PasswordSignInAsync(It.IsAny<string>(), It.IsAny<string>(), It.IsAny<bool>(), It.IsAny<bool>()))
-                 //.ReturnsAsync(Microsoft.AspNetCore.Identity.SignInResult.Success);
-            mockSignInManager.Setup(m => m.PasswordSignInAsync(
-                It.IsAny<IdentityUser>(),
-                It.IsAny<string>(),
-                It.IsAny<bool>(),
-                It.IsAny<bool>()))
-                .ReturnsAsync(Microsoft.AspNetCore.Identity.SignInResult.Success);
+                mockSignInManager.Setup(m => m.PasswordSignInAsync(
+                    It.IsAny<IdentityUser>(),
+                    It.IsAny<string>(),
+                    It.IsAny<bool>(),
+                    It.IsAny<bool>()))
+                    .ReturnsAsync(Microsoft.AspNetCore.Identity.SignInResult.Success);
+            }
 
-            var controller = new AccountController(
-                mockUserManager.Object, mockSignInManager.Object, mockLocalizer.Object);
+            if (!isValid)
+            {
+                mockUserManager.Setup(um => um.FindByNameAsync(loginModel.Name)).ReturnsAsync(identityUser);
+                mockUserManager.Setup(um => um.CheckPasswordAsync(identityUser, loginModel.Password)).ReturnsAsync(false);
 
+                mockSignInManager.Setup(m => m.PasswordSignInAsync(
+                    It.IsAny<IdentityUser>(),
+                    It.IsAny<string>(),
+                    It.IsAny<bool>(),
+                    It.IsAny<bool>()))
+                    .ReturnsAsync(Microsoft.AspNetCore.Identity.SignInResult.Failed);
+            }
+
+            _accountController = new AccountController(
+                mockUserManager.Object, mockSignInManager.Object, mockLocalizer.Object);
 
             // Mock HttpContext
             var httpContextMock = new Mock<HttpContext>();
@@ -103,51 +125,136 @@ namespace P3AddNewFunctionalityDotNetCore.Tests
 
             // Assign ControllerContext to SignInManager and Controller
             mockSignInManager.Object.Context = httpContextMock.Object; // If Context property is available
-            controller.ControllerContext = controllerContext;
+            _accountController.ControllerContext = controllerContext;
+        }
+
+        [Fact]
+        public async Task Login_WhenValidCredentials_LogsInAndRedirectsToAdminIndex()
+        {
+            // ARRANGE
 
-            var validationContext = new ValidationContext(loginModel, null, null);
-            var validationResults = new List<ValidationResult>();
+            LoginModel loginModel = StartLoginModel("Admin", "P@ssword123", null);
+            IdentityUser identityUser = StartIdentityUser(loginModel);
+            SetupMocking(loginModel, identityUser);
 
-            bool isValid;
+            bool isValid = LoginValidator(loginModel);
 
-            if (IdentitySeedData.AdminPassword == loginModel.Password && IdentitySeedData.AdminUser == loginModel.Name)
-            {
-                isValid = Validator.TryValidateObject(loginModel, validationContext, validationResults, true);
-            }
-            else
-            {
-                isValid = false;
-            }
+            // ACT
+            var result = await _accountController.Login(loginModel);
 
-            // Act
-            var result = await controller.Login(loginModel);
-            if (result != null && isValid == true)
+            // ASSERT
+
+            if (result != null && isValid)
             {
-                if (result is ViewResult)
+                if (result is ViewResult viewResult)
                 {
-                    var viewResult = result as ViewResult;
                     Assert.Equal("Login", viewResult.ViewName);
                 }
-                if (result is RedirectResult redirectResult)
+                else if (result is RedirectResult redirectResult)
                 {
-                    // TODO Refactor
                     Assert.NotNull(result);
-                    string expectedUrl = "/Admin/Index";
+                    const string expectedUrl = "/Admin/Index";
                     Assert.Equal(expectedUrl, redirectResult.Url);
-
                 }
             }
-
-            else 
-            {   
+            else
+            {
                 Assert.Fail("Invalid name or password");
             }
         }
-    
 
-        //[Fact]
-        //public void Login_WhenNamePasswordAreWrong_ReturnView()
-        //{
-        //}
+        [Fact]
+        public async Task Login_WhenInvalidCredentials_NotLogIn()
+        {
+            // ARRANGE - Different scenarios of invalid credentials
+
+            // Username: WrongId, Password: WrongPassword
+            LoginModel loginModel = StartLoginModel("WrongId", "WrongPassword", null);
+            IdentityUser identityUser = StartIdentityUser(loginModel);
+            SetupMocking(loginModel, identityUser);
+
+            // Username: "WrongId", Password: "P@ssword123"
+            LoginModel loginModel2 = StartLoginModel("WrongId", "P@ssword123", null);
+            IdentityUser identityUser2 = StartIdentityUser(loginModel2);
+            SetupMocking   (loginModel2, identityUser2);
+
+            // Username: "Admin", Password: "WrongPassword"
+            LoginModel loginModel3 = StartLoginModel("Admin", "WrongPassword", null);
+            IdentityUser identityUser3 = StartIdentityUser(loginModel3);
+            SetupMocking(loginModel3, identityUser3);
+
+            // Username: "", Password: ""
+            LoginModel loginModel4 = StartLoginModel("", "", null);
+            IdentityUser identityUser4 = StartIdentityUser(loginModel4);
+            SetupMocking(loginModel4, identityUser4);
+
+            // Username: "", Password: "P@ssword123"
+            LoginModel loginModel5 = StartLoginModel("", "P@ssword123", null);
+            IdentityUser identityUser5 = StartIdentityUser(loginModel5);
+            SetupMocking(loginModel5, identityUser5);
+
+            // Username: "Admin", Password: ""
+            LoginModel loginModel6 = StartLoginModel("Admin", "", null);
+            IdentityUser identityUser6 = StartIdentityUser(loginModel6);
+            SetupMocking(loginModel6, identityUser6);
+
+            bool isValid = LoginValidator(loginModel);
+            bool isValid2 = LoginValidator(loginModel2);
+            bool isValid3 = LoginValidator(loginModel3);
+            bool isValid4 = LoginValidator(loginModel4);
+            bool isValid5 = LoginValidator(loginModel5);
+            bool isValid6 = LoginValidator(loginModel6);
+
+            // ACT
+            var result = await _accountController.Login(loginModel);
+            var viewResult = result as ViewResult;
+
+            var result2 = await _accountController.Login(loginModel2);
+            var viewResult2 = result2 as ViewResult;
+
+            var result3 = await _accountController.Login(loginModel3);
+            var viewResult3 = result3 as ViewResult;
+
+            var result4 = await _accountController.Login(loginModel4);
+            var viewResult4 = result4 as ViewResult;
+
+            var result5 = await _accountController.Login(loginModel5);
+            var viewResult5 = result5 as ViewResult;
+
+            var result6 = await _accountController.Login(loginModel6);
+            var viewResult6 = result6 as ViewResult;
+
+            // ASSERT
+
+            Assert.False(isValid, "ModelState should be Invalid because we have used wrong credentials");
+            Assert.NotNull(result);
+            Assert.IsType<ViewResult>(result);
+            Assert.True(viewResult.ViewData.ModelState.ContainsKey("InvalidCredentials"), "ModelState should contain an error for 'InvalidCredentials'");
+
+            Assert.False(isValid2, "ModelState should be Invalid because we have used wrong credentials");
+            Assert.NotNull(result2);
+            Assert.IsType<ViewResult>(result2);
+            Assert.True(viewResult2.ViewData.ModelState.ContainsKey("InvalidCredentials"), "ModelState should contain an error for 'InvalidCredentials'");
+
+            Assert.False(isValid3, "ModelState should be Invalid because we have used wrong credentials");
+            Assert.NotNull(result3);
+            Assert.IsType<ViewResult>(result3);
+            Assert.True(viewResult3.ViewData.ModelState.ContainsKey("InvalidCredentials"), "ModelState should contain an error for 'InvalidCredentials'");
+
+            Assert.False(isValid4, "ModelState should be Invalid because we have used wrong credentials");
+            Assert.NotNull(result4);
+            Assert.IsType<ViewResult>(result4);
+            Assert.True(viewResult4.ViewData.ModelState.ContainsKey("InvalidCredentials"), "ModelState should contain an error for 'InvalidCredentials'");
+
+            Assert.False(isValid5, "ModelState should be Invalid because we have used wrong credentials");
+            Assert.NotNull(result5);
+            Assert.IsType<ViewResult>(result5);
+            Assert.True(viewResult5.ViewData.ModelState.ContainsKey("InvalidCredentials"), "ModelState should contain an error for 'InvalidCredentials'");
+
+            Assert.False(isValid6, "ModelState should be Invalid because we have used wrong credentials");
+            Assert.NotNull(result6);
+            Assert.IsType<ViewResult>(result6);
+            Assert.True(viewResult6.ViewData.ModelState.ContainsKey("InvalidCredentials"), "ModelState should contain an error for 'InvalidCredentials'");
+        }
     }
 }
\ No newline at end of file
diff --git a/P3AddNewFunctionalityDotNetCore/Controllers/AccountController.cs b/P3AddNewFunctionalityDotNetCore/Controllers/AccountController.cs
index 93a49c5..92d0534 100644
--- a/P3AddNewFunctionalityDotNetCore/Controllers/AccountController.cs
+++ b/P3AddNewFunctionalityDotNetCore/Controllers/AccountController.cs
@@ -48,7 +48,7 @@ namespace P3AddNewFunctionalityDotNetCore.Controllers
                     }
                 }
             }
-            ModelState.AddModelError("", _localizer["Invalid name or password"]);
+            ModelState.AddModelError("InvalidCredentials", _localizer["Invalid name or password"]);
             return View(loginModel);
         }
 
